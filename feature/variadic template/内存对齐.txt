内存对齐：如果把内存看成一个一个小区间的话，对于这些小区间的分配有一
定的规则，是按照一块一块（几个绑定在一起）来分配的，而不是随意的，一个挨着
一个的。举个例子来说，如果一个数据类型的内存对齐的大小是8，那么由这个数据类型
所定义出来的所有变量的内存地址都是8的倍数，比如0x08,0x10之类的，不可能是0x07
如果前面一个变量的内存地址是0x02-0x03，此时如果不是内存对齐的话，那么下一个内存的
地址是0x04，但是由于需要对齐所以应该是0x08

为什么需要内存对齐，这个和底层硬件有关，有两个原因，一个是CPU在取内存的时候是多个字节一起取的，
这个和总线大小有关，而取内存的时候，CPU又是对其的，比如四个四个一起，八个八个一起，如果一个变量不是内存对齐的话，
CPU可能需要两次及以上才能完整的获得这个变量的信息，比如8个byte的变量X位于0x03-0x0A，这时候CPU需要取两次，一次是0x03到0x07
另一次是0x08到0x0A，这还是CPU支持任意内存访问的情况，有的平台的CPU，比如Alpha、IA-64，如果读取的数据是未对齐的，直接会报错

就效率而言来说，多次访问本身也会降低处理速度，所以内存还是对齐的好；一般而言，windows默认是8，Linux是4


结构体的内存对齐：
讨论一下结构体的内存对齐情况

struct  Mystruct {
    //假设起始地址未0x00
	char a;         //1 byte    0x00         3 pad
	int b;          //4 bytes   0x04-0x07    0 pad   
	short c;        //2 bytes   0x08-0x09    6 pad
	long long d;    //8 bytes   0x10-0x17    0 pad
	char e;         //1 byte    0x18         7 pad
};

VS2017下sizeof(Mystruct) = 32，因为此时保证了每个内部成员都在它对齐了的位置上
而对于结构体而言，结构体的对齐大小等于结构体内最大成员的对齐值，上面例子为8

比如下面这个例子
struct Mystruct_2 {
	char a;        //1 byte     0x00        7 pad
	Mystruct b;    //32 bytes   0x08-0x27   0 pad
	int c;         //4 bytes    0x28-0x31   0 pad
	short d;       //2 bytes    0x32-0x33   2 pad
};

VS2017下sizeof(Mystruct_2) = 48，通过人肉地址分析可以看出每个成员变量都在其对齐了的位置上（该对齐2的在2的倍数上，该对齐8的在8的倍数上）
PS: 有兴趣的话可以，对每个成员变量取地址分析


堆的内存对齐：
使用malloc分配内存的时候，在MSCV下32位的系统是按照8字节对齐，64位系统是按照16字节对齐。但是如果自定义结构的内存对齐超出了这个范围，此时用malloc就不合适了
C++ 提供了alignas，alignof， alignment_of， aligned_storage, align来解决这个问题


struct alignas(32) Mystruct {       //设置一下内存对齐大小为32
    //假设起始地址未0x00
	char a;         //1 byte    0x00         3 pad
	int b;          //4 bytes   0x04-0x07    0 pad   
	short c;        //2 bytes   0x08-0x09    6 pad
	long long d;    //8 bytes   0x10-0x17    0 pad
	char e;         //1 byte    0x18         7 pad
};


std::aligned_storage(sizeof(Mystruct), alignof(Mystruct));       //获得一块大小为sizeof(Mystruct)的内存，对齐大小为alignof(Mystruct)

std::align(alignof(int), sizeof(char), pt, ps);                 //在pt指向的内存块中分配大小为sizeof(char)的内存，按照alignof(int)的大小对齐，分配的内存交给pt，余下的内存交给ps

但是又有一个问题：为什么超出标准之外的内存需要特意取重新定义内存对齐大小，在这种情况下不是已经按照最大成员对齐值对齐了吗


